#include "Mesh.h"
#include "Math_util.h"
#include "Image.h"

#include "assimp/cimport.h"
#include "assimp/mesh.h"
#include "assimp/scene.h"
#include "assimp/postprocess.h"
#include "assimp/DefaultLogger.hpp"
#include "assimp/LogStream.hpp"
#include "assimp/Importer.hpp"
#include "glm/glm.hpp"

#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include <map>

#define aisgl_min(x,y) (x<y?x:y)
#define aisgl_max(x,y) (y>x?y:x)

GLfloat		xrot;
GLfloat		yrot;
GLfloat		zrot;

GLfloat LightAmbient[]= { 0.5f, 0.5f, 0.5f, 1.0f };
GLfloat LightDiffuse[]= { 1.0f, 1.0f, 1.0f, 1.0f };
GLfloat LightPosition[]= { 0.0f, 0.0f, 15.0f, 1.0f };

Assimp::Importer importer;
const aiScene* scene = NULL;

void meshEntry(aiMesh *mesh)
{
    VertexArray vao = VertexArray();
    VertexBufferLayout layout;
    VertexBuffer vertexBuf;
    VertexBuffer texCoordBuf;
    VertexBuffer normalBuf;

    IndexBuffer indexBuffer;


    // Find positions
	if(mesh->HasPositions()) {
		float *vertices = new float[mesh->mNumVertices * 3];
		for(unsigned int i = 0; i < mesh->mNumVertices; ++i) {
			vertices[i * 3]     = mesh->mVertices[i].x;
			vertices[i * 3 + 1] = mesh->mVertices[i].y;
			vertices[i * 3 + 2] = mesh->mVertices[i].z;
		}

        // Create VBO
        vertexBuf = VertexBuffer(vertices, (3 * mesh->mNumVertices * sizeof(float)) );
        layout = VertexBufferLayout();
        layout.push<float>(3);
        vao.addBuffer(vertexBuf, layout);

        std::cout << "Vertices: " << mesh->mNumVertices << "\n";

        delete[] vertices;
	}

    // Find texture coordinates
	if(mesh->HasTextureCoords(0)) {
		float *texCoords = new float[mesh->mNumVertices * 2];
		for(unsigned int i = 0; i < mesh->mNumVertices; ++i) {
			texCoords[i * 2]     = mesh->mTextureCoords[0][i].x;
			texCoords[i * 2 + 1] = mesh->mTextureCoords[0][i].y;
		}

        // Create VBO
        texCoordBuf = VertexBuffer(texCoords, (2 * mesh->mNumVertices * sizeof(float)) );
        layout = VertexBufferLayout();
        layout.push<float>(2);
        vao.addBuffer(texCoordBuf, layout);

        std::cout << "TexCoords: : " << mesh->mNumVertices << "\n";

        delete[] texCoords;
	}

    // Find normals
	if(mesh->HasNormals()) {
		float *normals = new float[mesh->mNumVertices * 3];
		for(unsigned int i = 0; i < mesh->mNumVertices; ++i) {
			normals[i * 3]     = mesh->mNormals[i].x;
			normals[i * 3 + 1] = mesh->mNormals[i].y;
			normals[i * 3 + 2] = mesh->mNormals[i].z;
		}

        normalBuf = VertexBuffer(normals, (3 * mesh->mNumVertices * sizeof(float)) );
        layout = VertexBufferLayout();
        layout.push<float>(3);
        vao.addBuffer(normalBuf, layout);

        std::cout << "Normals: : " << mesh->mNumVertices << "\n";

		delete[] normals;
	}


    // Find indices of faces
	if(mesh->HasFaces()) {
		unsigned int *indices = new unsigned int[mesh->mNumFaces * 3];
		for(unsigned int i = 0; i < mesh->mNumFaces; ++i) {
			indices[i * 3] = mesh->mFaces[i].mIndices[0];
			indices[i * 3 + 1] = mesh->mFaces[i].mIndices[1];
			indices[i * 3 + 2] = mesh->mFaces[i].mIndices[2];
		}

        indexBuffer = IndexBuffer(indices, (unsigned int) 3 * mesh->mNumFaces);
        indexBuffer.Bind();

        std::cout << "Indices: : " << mesh->mNumFaces << "\n";

		delete[] indices;
	}


	GLDebug( glBindBuffer(GL_ARRAY_BUFFER, 0) );
	GLDebug( glBindVertexArray(0) );
}

/*
 * for indices:
*unsigned int idxBuf;
*glGenBuffers(1, &idxBuf );
*glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, idxBuf);
*glBufferData(GL_ELEMENT_ARRAY_BUFFER, 3 * mesh->mNumFaces * sizeof(GLuint), indices, GL_STATIC_DRAW );
*glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 0, NULL );
*glEnableVertexAttribArray (3);
*/
